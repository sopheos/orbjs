{"version":3,"sources":["../../../src/upload/file.ts"],"names":["FileUpload","options","Subject","maxSize","name","fileSize","timeUpload","progress","asObservable","pipe","value","error","complete","success","file","data","reset","isFileValid","buildFormData","execRequest","lastFormData","started","setTimeout","next","cancelRequest","size","formData","FormData","append","forEach","item","Blob","fileName","allowedTypes","length","some","allowedType","type","isFileTypeValid","isFileSizeValid","CancelToken","axios","headers","axiosConfig","method","url","withCredentials","Expires","Date","toUTCString","Pragma","cancelToken","canceler","onUploadProgress","initialProgress","loaded","total","start","now","request","then","catch","isCancel"],"mappings":"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","sourcesContent":["import axios, { Canceler, AxiosRequestConfig } from 'axios';\nimport { Subject, Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nexport interface metadata { \n  name: string, \n  value: string | Blob, \n  fileName?: string \n}\n\n/**\n * FileUpload Options\n */\nexport interface FileUploadOptions {\n  /**\n   * Allowed types to upload. Format types MIME. If not set, all type allowed.\n   */\n  allowedTypes?: Array<string>;\n\n  /**\n   * Callback to build headers to send with the request\n   */\n  headers?: Function;\n\n  /**\n   * Max File Size\n   * @default 20971520\n   */\n  maxSize?: number;\n\n  /**\n   * File name\n   * @default 'file'\n   */\n  name?: string;\n\n  /**\n   * Destination url\n   */\n  url: string;\n}\n\n/**\n * Class upload file, to send a file to a server with an axios request\n * Documentation : Le live\n */\nexport class FileUpload {\n  protected fileSize: number | null = null;\n  protected timeUpload: number | null = null;\n  protected progress = new Subject<number>();\n  protected complete = new Subject<boolean>();\n  protected success = new Subject<any>();\n  protected error = new Subject<any>();\n  protected options: FileUploadOptions;\n  protected cancelRequest!: Canceler;\n  protected started: boolean = false;\n  protected initialProgress: number = 0;\n  protected lastFormData!: FormData;\n\n  /**\n   * @param {FileUploadOptions} options\n   */\n  constructor(options: FileUploadOptions) {\n    const {\n      maxSize = 20971520,\n      name = 'file',\n    } = options;\n\n    this.options = { maxSize, name, ...options };\n  }\n\n  /**\n   * @returns {number | null}\n   */\n  public getFileSize(): number | null {\n    return this.fileSize;\n  }\n  /**\n   * @returns {number | null}\n   */\n  public getTimeUpload(): number | null {\n    return this.timeUpload;\n  }\n  /**\n   * Observable request progress\n   * @returns {Observable<number>}\n   */\n  public onProgress(): Observable<number> {\n    return this.progress.asObservable().pipe(filter(value => value !== null));\n  }\n\n  /**\n   * Observable error\n   * @returns {Observable<any>}\n   */\n  public onError(): Observable<any> {\n    return this.error.asObservable().pipe(filter(value => value !== null));\n  }\n\n  /**\n   * Request completed\n   * @returns {Observable<boolean>}\n   */\n  public onComplete(): Observable<boolean> {\n    return this.complete.asObservable().pipe(filter(value => value !== null));\n  }\n\n  /**\n   * Request Succeeded\n   * @returns {Observable<any>}\n   */\n  public onSuccess(): Observable<any> {\n    return this.success.asObservable().pipe(filter(value => value !== null));\n  }\n\n  /**\n   * Check if file is valid & call buildFormData()\n   * @param {File} file\n   * @param {Array<{Â name: string, value: string | Blob, fileName?: string }>} data default empty array\n   */\n  public upload(file: File, data: Array<{ name: string, value: string | Blob, fileName?: string }> = []): void {\n    this.reset();\n\n    if (!this.isFileValid(file)) {\n      return;\n    }\n\n    this.buildFormData(file, data);\n  }\n\n  /**\n   * Retry to upload last FormData\n   */\n  public reupload(): void {\n    this.execRequest(this.lastFormData);\n  }\n\n  /**\n   * Reset FileUpload\n   */\n  protected reset(): void {\n    this.started = false;\n    setTimeout(() => this.progress.next(0));\n\n    // Cancel request si cancelable\n    if (this.cancelRequest) {\n      this.cancelRequest();\n    }\n  }\n\n  /**\n   * Build FormData & call execRequest()\n   * @param {File} file\n   * @param {metadata} data default empty array\n   */\n  protected buildFormData(file: File, data: Array<metadata> = []): void {\n    this.fileSize = file.size;\n    const formData = new FormData();\n    formData.append(this.options.name!, file, file.name);\n    if (data) {\n      data.forEach((item) => {\n        if (item.value instanceof Blob) {\n          formData.append(item.name, item.value, item.fileName);\n        } else {\n          formData.append(item.name, item.value);\n        }\n      })\n    }\n    this.execRequest(formData);\n  }\n\n  /**\n   * Determines if file type is valid\n   * @param {File} file\n   * @returns {boolean} true if file type valid, false otherwise\n   */\n  protected isFileTypeValid(file: File): boolean {\n    if (\n      this.options.allowedTypes!.length > 0\n      && !this.options.allowedTypes!.some(allowedType => allowedType === file.type)\n    ) {\n      setTimeout(() => this.error.next('invalid_filetype'));\n      setTimeout(() => this.complete.next(true));\n      this.reset();\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Determines if file size is valid\n   * @param {File} file\n   * @returns {boolean} true if file size valid, false otherwise\n   */\n  protected isFileSizeValid(file: File): boolean {\n    if (this.options.maxSize! && file.size > this.options.maxSize!) {\n      setTimeout(() => this.error.next('invalid_filesize'));\n      setTimeout(() => this.complete.next(true));\n      this.reset();\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Determines if file is valid\n   * @param {File} file\n   * @returns {boolean} true if file is valid, false otherwise\n   */\n  protected isFileValid(file: File): boolean {\n    return this.isFileTypeValid(file) && this.isFileSizeValid(file);\n  }\n\n  /**\n   * Prepare & send request to provided url\n   * @param {FormData} formData\n   */\n  private async execRequest(formData: FormData): Promise<void> {\n    this.lastFormData = formData;\n    this.started = true;\n    const { CancelToken } = axios;\n\n    let headers = {};\n    if (this.options.headers) {\n      headers = await this.options.headers()\n    }\n\n    const axiosConfig: AxiosRequestConfig = {\n      method: 'POST',\n      url: this.options.url,\n      data: formData,\n      withCredentials: true,\n      headers: {\n        ...headers,\n        Expires: 'Mon, 26 Jul 1990 05:00:00 GMT',\n        'Last-Modified': `${new Date().toUTCString()} GMT`,\n        'Cache-Control': 'no-store, no-cache, must-revalidate, post-check=0, pre-check=0',\n        Pragma: 'no-cache'\n      },\n      cancelToken: new CancelToken(canceler => {\n        this.cancelRequest = canceler;\n      }),\n      onUploadProgress: progress =>\n        setTimeout(() => this.progress.next(this.initialProgress + (progress.loaded / progress.total) * (100 - this.initialProgress))),\n    };\n\n    const start = Date.now();\n    // Send upload request\n    axios.request(axiosConfig).then((success) => {\n      this.timeUpload = Date.now() - start;\n      setTimeout(() => this.success.next(success.data));\n\n      this.started = false;\n      setTimeout(() => this.complete.next(true));\n    }).catch((error) => {\n      this.reset();\n      if (!axios.isCancel(error))\n        setTimeout(() => this.error.next(error));\n\n      this.started = false;\n      setTimeout(() => this.complete.next(true));\n    });\n  }\n}\n"],"file":"file.js"}