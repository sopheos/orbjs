{"version":3,"sources":["../../../src/geo/point.ts"],"names":["Point","lat","lon","rad_lat","rad_lon","toInt","Math","PI","lng","point","tLat","getRadLat","tLon","getRadLon","pLat","pLon","acos","sin","cos","EARTH_RADIUS","path","min","max","inside","getLat","getLon","outer","length","some","insidePoly","inner","every","vertices","insideVertice","geojson","type","coordinates","insideGeoCoordinates","i","coords","e","n","y","x","lon_i","lat_i","l","j","xi","yi","xj","yj","intersect","val","precision","floor"],"mappings":"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","sourcesContent":["import { POINT_CONVERSION_COMPRESSED } from \"constants\";\n\n/**\n * Point\n */\nexport class Point {\n\n    static readonly EARTH_RADIUS = 6378137;\n\n    private lat: number;\n    private lon: number;\n    private rad_lat: number | null = null;\n    private rad_lon: number | null = null\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    public constructor(lat: number = 0, lon: number = 0) {\n        this.lat = lat;\n        this.lon = lon;\n    }\n\n    public static fromDegree(lat: number = 0, lon: number = 0): Point {\n        return new Point(lat, lon);\n    }\n\n    public static fromRadian(lat: number = 0, lon: number = 0): Point {\n        return new Point(lat * 180 / Math.PI, lon * 180 / Math.PI);\n    }\n\n    public static fromMn95(e: number = 0, n: number = 0): Point {\n        // Convertir les coordonnées de projection E (coordonnée est) \n        // et N (coordonnée nord) en MN95 \n        // dans le système civil (Berne = 0 / 0) \n        // et exprimer dans l'unité [1000 km]\n        let y = (e - 2600000) / 1000000;\n        let x = (n - 1200000) / 1000000;\n\n        // Calculer la longitude et la latitude dans l'unité [10000\"]\n        let lon_i = 2.6779094;\n        lon_i += 4.728982 * y;\n        lon_i += + 0.791484 * y * x;\n        lon_i += 0.1306 * y * x * x;\n        lon_i -= 0.0436 * y * y * y;\n\n        let lat_i = 16.9023892;\n        lat_i += 3.238272 * x;\n        lat_i -= 0.270978 * y * y;\n        lat_i -= 0.002528 * x * x;\n        lat_i -= 0.0447 * y * y * x;\n        lat_i -= 0.0140 * x * x * x;\n\n        // Convertir la longitude et la latitude dans l'unité [°]\n        let lon = lon_i * 100 / 36;\n        let lat = lat_i * 100 / 36;\n\n        return new Point(lat, lon);\n    }\n\n    // -------------------------------------------------------------------------\n    // Setter\n    // -------------------------------------------------------------------------\n\n    public setLat(lat: number): Point {\n        this.lat = lat;\n        this.rad_lat = null;\n        return this;\n    }\n\n    public setLon(lon: number): Point {\n        this.lon = lon;\n        this.rad_lon = null;\n        return this;\n    }\n\n    // -------------------------------------------------------------------------\n    // Getter\n    // -------------------------------------------------------------------------\n\n    public isNull(): boolean {\n        return this.lat === 0 && this.lon === 0;\n    }\n\n    public getLat(): number {\n        return this.lat;\n    }\n\n    public getLon(): number {\n        return this.lon;\n    }\n\n    public getLatInt(): number {\n        return Point.toInt(this.lat);\n    }\n\n    public getLonInt(): number {\n        return Point.toInt(this.lon);\n    }\n\n    public getRadLat(): number {\n        if (this.rad_lat === null) {\n            this.rad_lat = this.lat * Math.PI / 180;\n        }\n\n        return this.rad_lat;\n    }\n\n    public getRadLon(): number {\n        if (this.rad_lon === null) {\n            this.rad_lon = this.lon * Math.PI / 180;\n        }\n\n        return this.rad_lon;\n    }\n\n    public latlng(): any {\n        return { lat: this.lat, lng: this.lon };\n    }\n\n    public latlon(): any {\n        return { lat: this.lat, lon: this.lon };\n    }\n\n    // -------------------------------------------------------------------------\n    // Tools\n    // -------------------------------------------------------------------------\n\n\n    public distanceTo(point: Point): number {\n\n        let tLat = this.getRadLat();\n        let tLon = this.getRadLon();\n        let pLat = point.getRadLat();\n        let pLon = point.getRadLon();\n\n        return Math.acos(Math.sin(tLat) * Math.sin(pLat) +\n            Math.cos(tLat) * Math.cos(pLat) *\n            Math.cos(tLon - pLon)) * Point.EARTH_RADIUS;\n    }\n\n    public isInside(path: any, min: Point, max: Point): boolean {\n\n        let inside = false;\n\n        if (min && max) {\n            inside = this.getLat() >= min.getLat()\n                && this.getLat() <= max.getLat()\n                && this.getLon() >= min.getLon()\n                && this.getLon() <= max.getLon();\n\n            if (inside === false) return inside;\n        }\n\n        if (!path) return inside;\n\n        if (path.outer && path.outer.length) {\n            path.outer.some((outer: number[][]) => {\n                inside = this.insidePoly(outer);\n                return inside;\n            });\n        }\n\n        if (inside && path.inner && path.inner.length) {\n            path.inner.every((inner: number[][]) => {\n                inside = this.insidePoly(inner);\n                return inside;\n            });\n        }\n\n        return inside;\n    }\n\n    public insidePoly(vertices: number[][]): boolean {\n        return Point.insideVertice(this.lat, this.lon, vertices);\n    }\n\n    public insideGeoJson(geojson: any) {\n        \n        if(! geojson.type || ! geojson.coordinates) {\n            return false;\n        }\n\n        if(geojson.type === 'Polygon') {\n            return this.insideGeoCoordinates(geojson.coordinates)\n        } else if(geojson.type === 'MultiPolygon') {\n            for(let i = 0; i < geojson.coordinates.length; i++) {\n                if(this.insideGeoCoordinates(geojson.coordinates[i])) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    private insideGeoCoordinates(coords: number[][][]) {\n        if(! coords.length) {\n            return false;\n        }\n\n        let inside = Point.insideVertice(this.lon, this.lat, coords[0]);\n\n        // Holes\n        if(inside && coords.length > 1) {\n            for(let i = 1; i < coords.length; i++) {\n                if(Point.insideVertice(this.lon, this.lat, coords[i])) {\n                    return false;\n                }\n            }\n        }\n\n        return inside;\n    }\n\n    public static insideVertice(x: number, y: number, vertices: number[][]): boolean {\n        let inside = false;\n\n        let l = vertices.length;\n        let i = 0;\n        let j = l - 1;\n\n        for (; i < l; j = i++) {\n\n            let xi = vertices[i][0];\n            let yi = vertices[i][1];\n            let xj = vertices[j][0];\n            let yj = vertices[j][1];\n\n            let intersect = ((yi > y) !== (yj > y)) && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);\n\n            if (intersect) inside = !inside;\n        }\n\n        return inside;\n    }\n\n    public static toInt(val: number, precision: number = 1000000): number {\n        return Math.floor(val * precision);\n    }\n\n    public static toFloat(val: number, precision: number = 1000000): number {\n        return val / precision;\n    }\n\n}"],"file":"point.js"}