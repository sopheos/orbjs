{"version":3,"sources":["../../../src/query_builder/index.ts"],"names":["QB","query","query_str","query_data","forEach","e","replace","data_save","data_keys","data_values","data_raw_keys","data_raw_values","from_stmt","group_stmt","group_count","group_level","having_data","having_stmt","is_distinct","join_stmt","limit_nb","offset_nb","order_by","select_stmt","where_data","where_stmt","name","export","cols","length","join","table","cond","_join","type","trim","statement","values","_where","col","_in","value","where","orWhere","v","str","groupStart","c","orLike","groupEnd","_group","repeat","prefix","push","operator","substring","_having","_order","suffix","limit","offset","data","Object","keys","map","add","addRaw","_buildSelect","_buildFrom","_buildJoin","_buildWhere","_buildGroupBy","_buildHaving","_buildOrderBy","_buildLimit","concat","_buildInsert","_buildUpdate","_buildDelete","frag","Array","from","fill","k","select","distinct","sql","update","i","split"],"mappings":"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","sourcesContent":["/**\n * Query Builder\n */\nexport class QB {\n\n    private data_save: any;\n    private query_str: string;\n    private query_data: any[];\n\n    private data_keys: any[];\n    private data_values: any[];\n    private data_raw_keys: string[];\n    private data_raw_values: string[];\n    private from_stmt: string;\n    private group_stmt: string;\n    private group_count: number;\n    private group_level: number;\n    private having_data: any[];\n    private having_stmt: string;\n    private is_distinct: boolean;\n    private join_stmt: string;\n    private limit_nb: number;\n    private offset_nb: number;\n    private order_by: string;\n    private select_stmt: string;\n    private where_data: any[];\n    private where_stmt: string;\n\n    // -------------------------------------------------------------------------\n\n    public constructor() {\n        this.data_save = {};\n        this.query_str = '';\n        this.query_data = [];\n\n        this.data_keys = [];\n        this.data_values = [];\n        this.data_raw_keys = [];\n        this.data_raw_values = [];\n        this.from_stmt = '';\n        this.group_stmt = '';\n        this.group_count = 0;\n        this.group_level = 0;\n        this.having_data = [];\n        this.having_stmt = '';\n        this.is_distinct = false;\n        this.join_stmt = '';\n        this.limit_nb = 0;\n        this.offset_nb = 0;\n        this.order_by = '';\n        this.select_stmt = '';\n        this.where_data = [];\n        this.where_stmt = '';\n    }\n\n    // -------------------------------------------------------------------------\n    // Save\n    // -------------------------------------------------------------------------\n\n    public reset(): QB {\n        this.query_str = '';\n        this.query_data = [];\n\n        this.data_keys = [];\n        this.data_values = [];\n        this.data_raw_keys = [];\n        this.data_raw_values = [];\n        this.from_stmt = '';\n        this.group_stmt = '';\n        this.group_count = 0;\n        this.group_level = 0;\n        this.having_data = [];\n        this.having_stmt = '';\n        this.is_distinct = false;\n        this.join_stmt = '';\n        this.limit_nb = 0;\n        this.offset_nb = 0;\n        this.order_by = '';\n        this.select_stmt = '';\n        this.where_data = [];\n        this.where_stmt = '';\n\n        return this;\n    }\n\n    public save(name: string = 'default'): QB {\n        this.data_save[name] = this.export()\n        return this;\n    }\n\n    public load(name: string = 'default'): QB {\n        if (!this.data_save[name]) {\n            return this;\n        }\n\n        this.data_keys = this.data_save[name].data_keys;\n        this.data_values = this.data_save[name].data_values;\n        this.data_raw_keys = this.data_save[name].data_raw_keys;\n        this.data_raw_values = this.data_save[name].data_raw_values;\n        this.from_stmt = this.data_save[name].from_stmt;\n        this.group_stmt = this.data_save[name].group_stmt;\n        this.group_count = this.data_save[name].group_count;\n        this.group_level = this.data_save[name].group_level;\n        this.having_data = this.data_save[name].having_data;\n        this.having_stmt = this.data_save[name].having_stmt;\n        this.is_distinct = this.data_save[name].is_distinct;\n        this.join_stmt = this.data_save[name].join_stmt;\n        this.limit_nb = this.data_save[name].limit_nb;\n        this.offset_nb = this.data_save[name].offset_nb;\n        this.order_by = this.data_save[name].order_by;\n        this.select_stmt = this.data_save[name].select_stmt;\n        this.where_data = this.data_save[name].where_data;\n        this.where_stmt = this.data_save[name].where_stmt;\n\n        return this;\n    }\n\n    public export() {\n        return {\n            data_keys: this.data_keys,\n            data_values: this.data_values,\n            data_raw_keys: this.data_raw_keys,\n            data_raw_values: this.data_raw_values,\n            from_stmt: this.from_stmt,\n            group_stmt: this.group_stmt,\n            group_count: this.group_count,\n            group_level: this.group_level,\n            having_data: this.having_data,\n            having_stmt: this.having_stmt,\n            is_distinct: this.is_distinct,\n            join_stmt: this.join_stmt,\n            limit_nb: this.limit_nb,\n            offset_nb: this.offset_nb,\n            order_by: this.order_by,\n            select_stmt: this.select_stmt,\n            where_data: this.where_data,\n            where_stmt: this.where_stmt,\n        };\n    }\n\n    // -------------------------------------------------------------------------\n    // Select\n    // -------------------------------------------------------------------------\n\n    public select(...cols: string[]): QB {\n\n        if (!cols.length) {\n            return this;\n        }\n\n        this.select_stmt += \",\\n\\t\" + cols.join(\",\\n\\t\");\n\n        return this;\n    }\n\n    public distinct(is_distinct: boolean = true): QB {\n        this.is_distinct = true\n        return this;\n    }\n\n    // -------------------------------------------------------------------------\n    // Table\n    // -------------------------------------------------------------------------\n\n    public from(table: string): QB {\n        this.from_stmt = table;\n        return this;\n    }\n\n    public join(table: string, cond: string): QB {\n        return this._join(table, cond);\n    }\n\n    public left(table: string, cond: string): QB {\n        return this._join(table, cond, 'LEFT');\n    }\n\n    public right(table: string, cond: string): QB {\n        return this._join(table, cond, 'RIGHT');\n    }\n\n    private _join(table: string, cond: string, type: string = ''): QB {\n        this.join_stmt += \"\\n\" + (type + \" JOIN \" + table + \" ON \" + cond).trim();\n        return this;\n    }\n\n    // -------------------------------------------------------------------------\n    // Where\n    // -------------------------------------------------------------------------\n\n    public where(statement: string, ...values: any[]): QB {\n        return this._where('AND', statement, values);\n    }\n\n    public orWhere(statement: string, ...values: any[]): QB {\n        return this._where('OR', statement, values);\n    }\n\n    public whereIn(col: string, values: any[]): QB {\n        return this._in(\"AND\", \"IN\", col, values);\n    }\n\n    public orWhereIn(col: string, values: any[]): QB {\n        return this._in(\"OR\", \"IN\", col, values);\n    }\n\n    public whereNotIn(col: string, values: any[]): QB {\n        return this._in(\"AND\", \"NOT IN\", col, values);\n    }\n\n    public orWhereNotIn(col: string, values: any[]): QB {\n        return this._in(\"OR\", \"NOT IN\", col, values);\n    }\n\n    public like(col: string, value: any): QB {\n        return this.where(col + \" LIKE ?\", value);\n    }\n\n    public orLike(col: string, value: any): QB {\n        return this.orWhere(col + \" LIKE ?\", value);\n    }\n\n    public notLike(col: string, value: any): QB {\n        return this.where(col + \" NOT LIKE ?\", value);\n    }\n\n    public orNotLike(col: string, value: any): QB {\n        return this.where(col + \" NOT LIKE ?\", value);\n    }\n\n    public search(cols: string[], values: string[]): QB {\n        values.forEach(v => {\n            let str = \"%\" + v.trim() + \"%\";\n            this.groupStart();\n            cols.forEach(c => {\n                this.orLike(c, str);\n            });\n            this.groupEnd();\n        });\n\n        return this;\n    }\n\n    public groupStart(): QB {\n        return this._group('AND');\n    }\n\n    public orGroupStart(): QB {\n        return this._group('OR');\n    }\n\n    public groupEnd(): QB {\n        if (this.group_level > 0) {\n            this.where_stmt += \"\\n\" + \"\\t\".repeat(this.group_level) + \")\";\n            this.group_level--;\n        }\n\n        return this;\n    }\n\n    private _where(prefix: string, statement: string, values: any[]): QB {\n        // Add link keyword if not the first element of a group\n        if (!this.where_stmt.length || this.group_count === 0) {\n            prefix = \"\";\n        }\n\n        this.group_count++;\n\n        values.forEach(v => {\n            this.where_data.push(v);\n        });\n\n        this.where_stmt += \"\\n\"\n            + \"\\t\".repeat(this.group_level + 1)\n            + (prefix + \" \" + statement).trim();\n\n        return this;\n    }\n\n    private _in(prefix: string, operator: string, col: string, values: any[]): QB {\n\n        if (values.length) {\n            let statement = col + \" \" + operator\n                + \"  (\" + \",?\".repeat(values.length).substring(1) + \")\";\n            this._where(prefix, statement, values);\n        }\n\n        return this;\n    }\n\n    private _group(prefix: string): QB {\n        if (!this.where_stmt.length || this.group_count === 0) {\n            prefix = \"\";\n        }\n\n        this.where_stmt += \"\\n\" + \"\\t\".repeat(this.group_level + 1) + (prefix + \" (\").trim();\n        this.group_count = 0;\n        this.group_level++;\n\n        return this;\n    }\n\n    // -------------------------------------------------------------------------\n    // Group & Having\n    // -------------------------------------------------------------------------\n\n    public groupBy(...cols: string[]): QB {\n        if (cols.length) {\n            this.group_stmt += \",\\n\\t\" + cols.join(\",\\n\\t\");\n        }\n\n        return this;\n    }\n\n    public having(statement: string, ...values: any[]): QB {\n        return this._having('AND', statement, values);\n    }\n\n    public orHaving(statement: string, ...values: any[]): QB {\n        return this._having('OR', statement, values);\n    }\n\n    private _having(prefix: string, statement: string, values: any[]): QB {\n        if (!this.having_stmt.length) {\n            prefix = \"\";\n        }\n\n        values.forEach(v => {\n            this.having_data.push(v);\n        });\n\n        this.having_stmt += \"\\n\\t\" + (prefix + \" \" + statement).trim();\n\n        return this;\n    }\n\n    // -------------------------------------------------------------------------\n    // Order\n    // -------------------------------------------------------------------------\n\n    public orderBy(...cols: string[]): QB {\n        return this._order(cols);\n    }\n\n    public orderAsc(...cols: string[]): QB {\n        return this._order(cols, 'ASC');\n    }\n\n    public orderDesc(...cols: string[]): QB {\n        return this._order(cols, 'DESC');\n    }\n\n    private _order(cols: string[], suffix: string = ''): QB {\n        if (suffix) {\n            suffix = \" \" + suffix;\n        }\n\n        if (cols.length) {\n            this.order_by += \",\\n\\t\" + cols.join(suffix + \",\\n\\t\") + suffix;\n        }\n\n        return this;\n    }\n\n    // -------------------------------------------------------------------------\n    // Limit\n    // -------------------------------------------------------------------------\n\n    public limit(limit: number, offset: number = 0): QB {\n        this.limit_nb = limit;\n        this.offset_nb = offset;\n\n        return this;\n    }\n\n    // -------------------------------------------------------------------------\n    // Set\n    // -------------------------------------------------------------------------\n\n    public add(col: string, value: any): QB {\n        this.data_keys.push(col);\n        this.data_values.push(value);\n\n        return this;\n    }\n\n    public addRaw(col: string, value: any): QB {\n        this.data_raw_keys.push(col);\n        this.data_raw_values.push(value);\n\n        return this;\n    }\n\n    public addList(data: any): QB {\n\n        Object.keys(data).map(col => {\n            this.add(col, data[col]);\n        });\n\n        return this;\n    }\n\n    public addListRaw(data: any): QB {\n\n        Object.keys(data).map(col => {\n            this.addRaw(col, data[col]);\n        });\n\n        return this;\n    }\n\n    // -------------------------------------------------------------------------\n    // Build\n    // -------------------------------------------------------------------------\n\n    public read(): QB {\n\n        this.query_str = this._buildSelect()\n            + this._buildFrom()\n            + this._buildJoin()\n            + this._buildWhere()\n            + this._buildGroupBy()\n            + this._buildHaving()\n            + this._buildOrderBy()\n            + this._buildLimit();\n\n        this.query_data = this.where_data.concat(this.having_data);\n\n        return this;\n    }\n\n    public count(): QB {\n        this.query_str = \"SELECT\\n\\tCOUNT(*) AS sum\"\n            + this._buildFrom()\n            + this._buildJoin()\n            + this._buildWhere()\n            + this._buildGroupBy()\n            + this._buildHaving()\n            + this._buildOrderBy()\n            + this._buildLimit();\n\n        if (this.group_stmt.length) {\n            this.query_str = \"SELECT COUNT(*) as sum FROM (\\n\" + this.query_str + \"\\n) as QBCOUNT\";\n        }\n\n        this.query_data = this.where_data.concat(this.having_data);\n\n        return this;\n    }\n\n    public insert(): QB {\n        this.query_str = this._buildInsert(false);\n        this.query_data = this.data_values;\n\n        return this;\n    }\n\n    public replace(): QB {\n        this.query_str = this._buildInsert(true);\n        this.query_data = this.data_values;\n\n        return this;\n    }\n\n    public update(): QB {\n        this.query_str = this._buildUpdate();\n        this.query_data = this.data_values.concat(this.where_data);\n\n        return this;\n    }\n\n    public delete(): QB {\n        this.query_str = \"\"\n            + this._buildDelete()\n            + this._buildJoin()\n            + this._buildWhere();\n\n        if (this.order_by.length) {\n            this.query_str += this._buildOrderBy();\n        }\n\n        if (this.limit_nb) {\n            this.query_str += this._buildLimit();\n        }\n\n        this.query_data = this.where_data;\n\n        return this;\n    }\n\n\n    public batch(table: string, data: any[], replace: boolean = false) {\n\n        let keys:any[] = Object.keys(data[0]);\n        let frag:string = '(' + Array.from(keys).fill('?').join(',') + ')';\n\n        this.query_str = replace ? 'REPLACE INTO ' : 'INSERT INTO ';\n        this.query_str += table + ' (' + keys.join(',') + ') VALUES \\n';\n        this.query_data = [];\n\n        data.forEach((e,k) => {\n            if(k > 0) this.query_str += ',\\n';\n            this.query_str += frag;\n            Object.keys(e).forEach(k => {\n                this.query_data.push(e[k]);\n            });\n        });\n\n        return this;\n    }\n\n    private _buildSelect(): string {\n\n        if (!this.select_stmt.length) {\n            this.select('*');\n        }\n\n        let distinct = this.is_distinct ? \" DISTINCT\" : \"\";\n\n        return \"SELECT\" + distinct + this.select_stmt.substring(1);\n    }\n\n    private _buildFrom(): string {\n        return \"\\nFROM \" + this.from_stmt;\n    }\n\n    private _buildJoin(): string {\n        return this.join_stmt;\n    }\n\n    private _buildWhere(): string {\n\n        while (this.group_level > 0) {\n            this.groupEnd();\n        }\n\n        if (this.where_stmt.length) {\n            return \"\\nWHERE\" + this.where_stmt;\n        }\n\n        return \"\";\n    }\n\n    private _buildGroupBy(): string {\n\n        if (this.group_stmt.length) {\n            return \"\\nGROUP BY\" + this.group_stmt.substring(1);\n        }\n\n        return \"\";\n    }\n\n    private _buildHaving(): string {\n\n        if (this.having_stmt.length) {\n            return \"\\nHAVING\" + this.having_stmt;\n        }\n\n        return \"\";\n    }\n\n    private _buildOrderBy(): string {\n\n        if (this.order_by.length) {\n            return \"\\nORDER BY\" + this.order_by.substring(1);\n        }\n\n        return \"\";\n    }\n\n    private _buildLimit(): string {\n\n        if (this.limit_nb) {\n            let sql = \"\\nLIMIT \" + this.limit_nb;\n\n            if (this.offset_nb) {\n                sql += \" OFFSET \" + this.offset_nb;\n            }\n\n            return sql;\n        }\n\n        return \"\";\n    }\n\n    private _buildInsert(replace: boolean = false): string {\n        let keys = '';\n        let values = '';\n\n        if (this.data_keys.length) {\n            keys += this.data_keys.join(\",\\n\\t\\t\");\n            values += \",\\n\\t\\t?\".repeat(this.data_keys.length).substring(1);\n        }\n\n        if (this.data_keys.length && this.data_raw_keys.length) {\n            keys += \",\\n\\t\\t\";\n            values += \",\\n\\t\\t\";\n        }\n\n        if (this.data_raw_keys.length) {\n            keys += this.data_raw_keys.join(\",\\n\\t\\t\");\n            values += this.data_raw_values.join(\",\\n\\t\\t\");\n        }\n\n        return (replace ? \"REPLACE\" : \"INSERT\")\n            + \" INTO\\n\\t\" + this.from_stmt\n            + \"(\\n\\t\\t\" + keys + \"\\n\\t)\\n\"\n            + \"VALUES \\t(\" + values + \"\\n\\t)\";\n    }\n\n    private _buildUpdate(): string {\n        let sql = \"UPDATE \" + this.from_stmt\n            + this._buildJoin()\n            + \"\\nSET\";\n\n        let update = \"\";\n\n        this.data_keys.forEach(col => {\n            update += \",\\n\\t\" + col + \" = ?\";\n        });\n\n        this.data_raw_keys.forEach((col, i) => {\n            update += \",\\n\\t\" + col + \" = \" + this.data_raw_values[i];\n        });\n\n        if (update) {\n            sql += update.substring(1);\n        }\n\n        sql += this._buildWhere();\n\n        return sql;\n    }\n\n    private _buildDelete(): string {\n\n        let select = \"\";\n        if (this.join_stmt.length) {\n            let from = this.from_stmt.split(' ');\n            select = from[from.length - 1];\n        }\n\n        return \"DELETE \" + select + \" FROM\\n\\t\" + this.from_stmt;\n    }\n\n    // -------------------------------------------------------------------------\n    // Result\n    // -------------------------------------------------------------------------\n\n    public query(): string {\n        return this.query_str;\n    }\n\n    public data(): any[] {\n        return this.query_data;\n    }\n\n    public toString = (): string => {\n\n        let query = this.query_str;\n\n        this.query_data.forEach(e => {\n            if (typeof e === 'string') {\n                query = query.replace('?', \"'\" + e + \"'\");\n            } else {\n                query = query.replace('?', e);\n            }\n        });\n\n        return query;\n    }\n\n    // -------------------------------------------------------------------------\n}\n"],"file":"index.js"}