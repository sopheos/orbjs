{"version":3,"sources":["../../../src/opening_hour/parser.ts"],"names":["isRuleModifier","isTime","isWeekDay","isMonth","parser","oh","date","currentDate","Date","schedules","listRules","split","forEach","ruleSequence","schedule","days","months","period","start","end","repeat","time","open","type","parts","index","length","test","status","constant","scheduleStatus","find","name","id","listTimes","listDay","day","scheduleDay","scheduleDays","push","listMonths","month","scheduleMonth","scheduleMonths","splice","getFullYear","monthStart","strStart","monthEnd","strEnd","startDate","endDate"],"mappings":"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","sourcesContent":["import * as constant from \"./constant\";\nimport { Schedule } from \"./schedules\";\n\nconst isRuleModifier = /^(open|closed)$/;\nconst isTime = /^(([01][0-9])|(2[0-3])):[0-5][0-9]-(([01][0-9])|(2[0-3])):[0-5][0-9]$/;\nconst isWeekDay = /^((Mo|Tu|We|Th|Fr|Sa|Su|PH),?)+$/;\nconst isMonth = /^((Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec),?)+$/;\n\n/**\n * Créé une liste d'objets horaires à partir du format opening_hour\n * @param {string} oh oh\n * @param {string | null} date date utilisé pour les périodes répétable, celle du device par défauts\n * @returns une liste d'horaires si opening_hour valide, null sinon\n */\nexport function parser(oh: string, date: string | null): Array<Schedule> | null {\n  const currentDate = date ? new Date(date) : new Date();\n  const schedules: Array<Schedule> = [];\n  const listRules = oh.split(';');\n  listRules.forEach((ruleSequence) => {\n    const schedule: Schedule = {\n      days: [],\n      months: [],\n      period: { start: null, end: null, repeat: null },\n      time: { open: 0, start: null, end: null },\n      type: 0,\n    };\n\n    const parts = ruleSequence.split(' ');\n    let index = parts.length - 1;\n\n    // Status\n    if (index >= 0 && isRuleModifier.test(parts[index])) {\n      const status = constant.scheduleStatus.find((status) => status.name === parts[index]);\n      if (!status) return null;\n      schedule.time.open = status.id;\n      index -= 1;\n    }\n\n    // Heure minute\n    if (index >= 0 && isTime.test(parts[index])) {\n      const listTimes = parts[index].split('-');\n      schedule.time.start = listTimes[0];\n      schedule.time.end = listTimes[1];\n      index -= 1;\n    }\n\n    // Jour\n    if (index >= 0 && isWeekDay.test(parts[index])) {\n      const listDay = parts[index].split(',');\n      listDay.forEach((day) => {\n        const scheduleDay = constant.scheduleDays.find((scheduleDay) => scheduleDay.name === day);\n        if (!scheduleDay) return null;\n        schedule.days.push(scheduleDay.id);\n      });\n      index -= 1;\n    }\n\n    // Mois\n    if (index >= 0 && isMonth.test(parts[index])) {\n      schedule.type = 1;\n      const listMonths = parts[index].split(',');\n      listMonths.forEach((month) => {\n        const scheduleMonth = constant.scheduleMonths.find((scheduleMonth) => scheduleMonth.name === month);\n        if (!scheduleMonth) return null;\n        schedule.months.push(scheduleMonth.id);\n      });\n      index -= 1;\n    }\n\n    // Période\n    if (index >= 0) {\n      schedule.type = 2;\n      if (index === 4) {\n        parts.splice(0, 0, `${currentDate.getFullYear()}`);\n        parts.splice(4, 0, `${currentDate.getFullYear()}`);\n        schedule.period.repeat = true;\n      } else {\n        schedule.period.repeat = false;\n      }\n\n      const monthStart = constant.scheduleMonths.find((scheduleMonth) => scheduleMonth.name === parts[1]);\n      if (!monthStart) return null;\n      let strStart = monthStart.id < 10 ? `0${monthStart.id}` : monthStart.id;\n\n      const monthEnd = constant.scheduleMonths.find((scheduleMonth) => scheduleMonth.name === parts[5]);\n      if (!monthEnd) return null;\n      let strEnd = monthEnd.id < 10 ? `0${monthEnd.id}` : monthEnd.id;\n\n      const startDate = `${strStart}-${parts[2]}`;\n      const endDate = `${strEnd}-${parts[6]}`;\n      if (startDate > endDate) {\n        parts[4] = `${currentDate.getFullYear() + 1}`;\n      }\n      \n      schedule.period.start = `${parts[0]}-${startDate}`;\n      schedule.period.end = `${parts[4]}-${endDate}`;\n    }\n    schedules.push(schedule);\n  });\n  return schedules;\n}\n"],"file":"parser.js"}