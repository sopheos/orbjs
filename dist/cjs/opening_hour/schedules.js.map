{"version":3,"sources":["../../../src/opening_hour/schedules.ts"],"names":["Schedules","schedules","currentDate","admin","date","Date","holiday","Holiday","getFullYear","listHoliday","getHoliday","listOtherHoliday","getOtherHoliday","listAdmins","getAdmins","size","weekData","Array","preview","setHours","index","month","getMonth","day","getDate","dayWeek","getDay","type","strDate","times","setDate","isOpen","currentType","isFr","split","i","length","schedule","scheduleType","period","repeat","periodStart","start","periodEnd","end","months","includes","days","some","dayId","time","open","scheduleIsOpen","hour","getHours","minute","getMinutes","strHour","push","week","concatWeek","prevHash","prevKey","prevTime","listDays","forEach","key","dayKey","hash","JSON","stringify","endArray","notSame","notAllDay","concatMonths","prevWeek","listMonths","monthKey","periods","ctx","Object","keys","map","dayIndex","weekDay","result","globalWeek","fill","sortWeek","monthIndex","global","concatPeriods"],"mappings":"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","sourcesContent":["import { start } from \"repl\";\nimport { arrayObject } from \"../lang/errors\";\nimport { Holiday } from \"./holiday\";\n\nexport interface Schedule {\n  days: Array<number>;\n  months: Array<number>;\n  period: { start: string | null, end: string | null, repeat: boolean | null },\n  time: { open: number, start: string | null, end: string | null },\n  type: number,\n}\n\nexport class Schedules {\n\n  private listHoliday: Array<String> = [];\n  private listOtherHoliday: Array<String> = [];\n  private listAdmins: Array<String> = [];\n\n  private schedules: Array<Schedule> = [];\n  private admin: string | null = null;\n\n  private date: Date;\n\n  private dayIndex: Array<number> = [6, 0, 1, 2, 3, 4, 5, 7];\n  private dayKey: Array<number> = [1, 2, 3, 4, 5, 6, 0, 7];\n  \n  private monthIndex: Array<number> = [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\n  private monthKey: Array<number> = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\n\n  constructor(schedules: Array<Schedule>, currentDate: string, admin: string | null = null) {\n    this.schedules = schedules;\n    this.date = new Date(currentDate);\n    this.admin = admin;\n\n    const holiday = new Holiday(this.date.getFullYear());\n    this.listHoliday = holiday.getHoliday();\n    this.listOtherHoliday = holiday.getOtherHoliday();\n    this.listAdmins = holiday.getAdmins();\n  }\n\n  /**\n    * Retourne l'état actuelle de l'horaires ainsi que la liste des horaires correspondant au jour renseigné\n    * @param {number} size Length of the preview (7 day by default)\n    * @returns {Object}\n    */\n  getPreview(size: number = 7): Object {\n    if (!size) return {};\n\n    const weekData = new Array(size);\n    const preview = new Array(size);\n\n    const date = new Date(this.date);\n    date.setHours(0, 0, 0, 0);\n\n    for (let index = 0; index < size; index++) {\n      const month = date.getMonth() + 1;\n      const day = date.getDate();\n      const dayWeek = date.getDay();\n      weekData[index] = {\n        type: 0,\n        date: new Date(date),\n        strDate: `${month < 10 ? `0${month}` : month}-${day < 10 ? `0${day}` : day}`,\n        month,\n        dayWeek,\n      };     \n      preview[index] = {\n        day: dayWeek,\n        times: [],\n      };\n      date.setDate(date.getDate() + 1);\n    }\n\n    let isOpen = null;\n    let currentType = null;\n\n    const isFr = this.admin ? this.admin.split('-')[0] === 'FR' : false\n    for (let i = 0; i < this.schedules.length; i += 1) {\n      const schedule: Schedule = this.schedules[i];\n\n      let scheduleType = schedule.type === 2 && !schedule.period.repeat ? 10 : schedule.type;\n\n      const periodStart = new Date(schedule.period.start ?? 0);\n      periodStart.setHours(0, 0, 0, 0);\n      const periodEnd = new Date(schedule.period.end ?? 0);\n      periodEnd.setHours(23, 59, 59, 999);\n\n\n      for (let index = 0; index < weekData.length; index++) {\n        // Periods or Months\n        if (schedule.type === 2) {\n          if (weekData[index].date < periodStart || weekData[index].date > periodEnd) {\n            continue;\n          }\n        } else if (schedule.type === 1 && !schedule.months.includes(weekData[index].month)) {\n          continue;\n        }\n\n        // Days\n        if (!schedule.days.includes(weekData[index].dayWeek)) {\n          if (schedule.days.some((dayId) => dayId === 7) && isFr) {\n            if (!this.listHoliday.includes(weekData[index].strDate)) {\n              if (!this.admin || !this.listAdmins.includes(this.admin) || !this.listOtherHoliday.includes(weekData[index].strDate)) {\n                continue;\n              }\n            }\n          } else {\n            continue;\n          }\n        }\n\n        // Time\n        if (scheduleType >= weekData[index].type) {\n          const start = schedule.time.start;\n          const end = schedule.time.end;\n          const open = !!schedule.time.open;\n\n          // Today state\n          let scheduleIsOpen = null;\n          if (index === 0) {\n            const hour = this.date.getHours();\n            const minute = this.date.getMinutes();\n            const strHour = `${hour < 10 ? `0${hour}` : hour}:${minute < 10 ? `0${minute}` : minute}`;\n            if (start && end) {\n                if (start <= strHour && strHour < end){\n                  scheduleIsOpen = open;\n                } else {\n                  scheduleIsOpen = false;\n                }\n            } else {\n              scheduleIsOpen = open;\n            }\n            currentType = schedule.type;\n          }\n\n          // Add or override schedule\n          if (scheduleType === weekData[index].type) {\n            preview[index].times.push({\n              open,\n              start,\n              end\n            });\n            if (index === 0) {\n              isOpen = isOpen ?? scheduleIsOpen;\n            }\n          } else if (scheduleType > weekData[index].type) {\n            weekData[index].type = scheduleType;\n            preview[index].times = [{\n              open,\n              start,\n              end\n            }];\n            if (index === 0) {\n              isOpen = scheduleIsOpen;\n            }\n          }\n        }\n      }\n    }\n\n    return {\n      isOpen,\n      type: currentType,\n      preview,\n    };\n  }\n\n  /**\n   * Consecutive days with the same schedule are grouped \n   * (public holidays are not grouped unless is schedules is the same as the other day of the week)\n   */\n  concatWeek(week: Array<Array<Object> | null> | null): Array<Object> | null {\n    const concatWeek: Array<object> = [];\n    let start: number | null = null;\n    let prevHash: string | null = null;\n    let prevKey: number | null = null;\n    let prevTime: Array<Object> | null = null;\n    let listDays: Array<number> = [];\n\n    week?.forEach((times: any, index) => {\n      const key = this.dayKey[index];\n\n      const hash: string = JSON.stringify(times);\n      const endArray = week.length - 1 === index;\n      const notSame = (prevHash && prevHash !== hash);\n\n      if (start === null) {\n        start = key;\n      } else if (notSame || endArray) {\n        const notAllDay = key === 7 && (notSame || start !== 1);\n        let end: number | null = notSame || notAllDay ? prevKey : key;\n\n        if (!notSame) {\n          listDays.push(key);\n        }\n        \n        concatWeek.push({\n          days: listDays,\n          start,\n          end: end !== start ? end : null,\n          times: prevTime\n        })\n\n        start = key;\n        listDays = [];\n\n        if (notAllDay) {\n          concatWeek.push({\n            days: [start],\n            start,\n            end: null,\n            times,\n          })\n        }\n      } \n\n      prevHash = hash;\n      prevKey = key;\n      prevTime = times;\n      listDays.push(key);\n    })\n\n    return concatWeek.length ? concatWeek : null;\n  }\n\n  /**\n   * Consecutive months with the same schedule are grouped\n   */\n  concatMonths(months: Array<Array<Array<Object> | null>>): Array<Object> {\n    const concatMonths: Array<object> = [];\n    let start: number | null = null;\n    let prevHash: string | null = null;\n    let prevKey: number | null = null;\n    let prevWeek: Array<Array<Object> | null> | null = null;\n    let listMonths: Array<number> = [];\n\n    months.forEach((week: any, index) => {\n      const key = this.monthKey[index];\n      const hash: string = JSON.stringify(week);\n      const endArray = months.length - 1 === index;\n      const notSame = (prevHash && prevHash !== hash);\n\n      if (start === null) {\n        start = key;\n      } else if (notSame || endArray) {\n        const end = notSame ? prevKey : key;\n        if (!notSame) {\n          listMonths.push(key);\n        }\n  \n        concatMonths.push({\n          start,\n          end: end !== start ? end : null,\n          months: listMonths,\n          week: this.concatWeek(prevWeek)\n        })\n\n        start = key;\n        listMonths = [];\n\n        if (notSame && endArray) {\n          concatMonths.push({\n            start,\n            end: null,\n            months: [start],\n            week: this.concatWeek(week)\n          })\n        }\n      } \n\n      prevHash = hash;\n      prevKey = key;\n      prevWeek = week;\n      listMonths.push(key);\n    })\n\n    return concatMonths;\n  }\n\n  /**\n   * Transform periods object in array \n   */\n  concatPeriods(periods: any): Array<Object> {\n    const ctx = this;\n    return Object.keys(periods)\n      .map((key) => {\n        const { start, end, repeat, week } = periods[key];\n        return {\n          start,\n          end: end !== start ? end : null,\n          repeat,\n          week: ctx.concatWeek(week)\n        };\n      });\n  }\n\n  /**\n   * Sort by day\n   * @param {Array} week \n   * @param {Schedule} schedule \n   */\n  sortWeek(week: Array<Array<Object> | null>, schedule: Schedule): void {\n    schedule.days.forEach((day) => {\n      const index = this.dayIndex[day];\n      const weekDay = week[index];\n      const result = { ...schedule.time , open: !!schedule.time.open}\n      if (weekDay) {\n        weekDay.push(result);\n      } else {\n        week[index] = [result];\n      }\n    });\n  }\n\n  /**\n   * @returns All schedules in a concatenated format\n   */\n  getConcat(): Object {\n    const globalWeek = new Array(8).fill(null);\n    const months = new Array(12).fill(null);\n    const periods: any = {};\n\n    this.schedules.forEach((schedule) => {\n      switch (schedule.type) {\n        case 0:\n          this.sortWeek(globalWeek, schedule);\n          break;\n        case 1:\n          // Sort by month\n          schedule.months.forEach((month) => {\n            const index = this.monthIndex[month];\n            let week = months[index];\n            if (!week) {\n              week = new Array(8).fill(null);\n              months[index] = week;\n            }\n            this.sortWeek(week, schedule);\n          });\n          break;\n        case 2:\n          // Sort by periods\n          const {start, end, repeat} = schedule.period;\n          const period = `${repeat}_${start}_${end}`;\n\n          let week = periods[period]?.week;\n          if (!week) {\n            week = new Array(8).fill(null);\n            periods[period] = {\n              start,\n              end,\n              repeat,\n              week\n            };\n          }\n          this.sortWeek(week, schedule);\n          break;\n        default:\n          break;\n      }\n    });\n\n    return {\n      global: this.concatWeek(globalWeek),\n      months: this.concatMonths(months),\n      periods: this.concatPeriods(periods),\n    };\n  }\n}\n"],"file":"schedules.js"}