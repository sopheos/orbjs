{"version":3,"sources":["../../../src/lang/errors.ts"],"names":["getEnvErrors","data","env","extra","listErrors","Object","keys","forEach","field","listFields","code","addExtra","getError","status","message","getErrors","errors","buildErrors","text","key","replace"],"mappings":"AAMC;AAIA;;AAED,SAASA,aAAT,CAAsBC,IAAtB,EAA2CC,GAA3C,EAAiF;AAAA,MAAzBC,KAAyB,uEAAJ,EAAI;AAC/E,MAAMC,UAAU,GAAGH,IAAI,CAACC,GAAD,CAAJ,IAAa,EAAhC;AACAG,EAAAA,MAAM,CAACC,IAAP,CAAYF,UAAZ,EAAwBG,OAAxB,CAAgC,UAACC,KAAD,EAAW;AACzC,QAAMC,UAAU,GAAGL,UAAU,CAACI,KAAD,CAAV,IAAqB,EAAxC;AACAH,IAAAA,MAAM,CAACC,IAAP,CAAYG,UAAZ,EAAwBF,OAAxB,CAAgC,UAACG,IAAD,EAAU;AACxCD,MAAAA,UAAU,CAACC,IAAD,CAAV,GAAmBC,QAAQ,CAACF,UAAU,CAACC,IAAD,CAAX,EAAmBP,KAAnB,CAA3B;AACD,KAFD;AAGD,GALD;AAMA,SAAOC,UAAP;AACD;;AAED,SAASQ,SAAT,CAAkBX,IAAlB,EAAuCY,MAAvC,EAAuDH,IAAvD,EAAqE;AACnE,MAAMN,UAAU,GAAGH,IAAI,CAAC,MAAD,CAAJ,CAAaY,MAAb,KAAwB,EAA3C;AACA,SAAO;AACLH,IAAAA,IAAI,EAAJA,IADK;AAELI,IAAAA,OAAO,EAAEV,UAAU,CAACM,IAAD,CAAV,IAAoBN,UAAU,CAAC,SAAD,CAA9B,8BAAgEM,IAAhE;AAFJ,GAAP;AAID;;AAAA;;AAED,SAASK,UAAT,CAAmBd,IAAnB,EAAwCC,GAAxC,EAAqDc,MAArD,EAAmG;AAAA,MAAzBb,KAAyB,uEAAJ,EAAI;AACjG,MAAMC,UAAU,GAAGH,IAAI,CAACC,GAAD,CAAJ,IAAa,EAAhC;AACA,MAAMe,WAAgB,GAAG,EAAzB;AACAZ,EAAAA,MAAM,CAACC,IAAP,CAAYU,MAAZ,EAAoBT,OAApB,CAA4B,UAACC,KAAD,EAAW;AACrC,QAAMC,UAAU,GAAGL,UAAU,CAACI,KAAD,CAAV,IAAqB,EAAxC;AACA,QAAME,IAAI,GAAGM,MAAM,CAACR,KAAD,CAAnB;AACAS,IAAAA,WAAW,CAACT,KAAD,CAAX,GAAqB;AACnBE,MAAAA,IAAI,EAAJA,IADmB;AAEnBI,MAAAA,OAAO,EAAEL,UAAU,CAACC,IAAD,CAAV,IAAoBD,UAAU,CAAC,SAAD,CAA9B,8BAAgEC,IAAhE;AAFU,KAArB;AAIAO,IAAAA,WAAW,CAACT,KAAD,CAAX,CAAmBM,OAAnB,GAA6BH,QAAQ,CAACM,WAAW,CAACT,KAAD,CAAX,CAAmBM,OAApB,EAA6BX,KAA7B,CAArC;AACD,GARD;AASA,SAAOc,WAAP;AACD;;AAAA;;AAED,SAASN,QAAT,CAAkBG,OAAlB,EAA4D;AAAA,MAAzBX,KAAyB,uEAAJ,EAAI;AAC1D,MAAIe,IAAI,GAAGJ,OAAX;AACAT,EAAAA,MAAM,CAACC,IAAP,CAAYH,KAAZ,EAAmBI,OAAnB,CAA2B,UAACY,GAAD,EAAS;AAClCD,IAAAA,IAAI,GAAGA,IAAI,CAACE,OAAL,aAAkBD,GAAlB,SAA2BhB,KAAK,CAACgB,GAAD,CAAhC,CAAP;AACD,GAFD;AAGA,SAAOD,IAAP;AACD;;AAAA;AAED,OAAO,IAAMF,MAAM,GAAG,SAATA,MAAS,CAACf,IAAD;AAAA,SAA0B;AAC9CD,IAAAA,YAAY,EAAE,sBAACE,GAAD,EAAcC,KAAd;AAAA,aAAqCH,aAAY,CAACC,IAAD,EAAOC,GAAP,EAAYC,KAAZ,CAAjD;AAAA,KADgC;AAE9CS,IAAAA,QAAQ,EAAE,kBAACC,MAAD,EAAiBH,IAAjB;AAAA,aAAkCE,SAAQ,CAACX,IAAD,EAAOY,MAAP,EAAeH,IAAf,CAA1C;AAAA,KAFoC;AAG9CK,IAAAA,SAAS,EAAE,mBAACb,GAAD,EAAcc,MAAd,EAAmCb,KAAnC;AAAA,aAA0DY,UAAS,CAACd,IAAD,EAAOC,GAAP,EAAYc,MAAZ,EAAoBb,KAApB,CAAnE;AAAA;AAHmC,GAA1B;AAAA,CAAf","sourcesContent":["export interface NestedSchemas {\n  [key: string]: {\n    [key: string]: {\n      [key: string]: string;\n    }\n  }\n};\n\nexport interface arrayObject {\n  [key: string]: string;\n};\n\nfunction getEnvErrors(data: NestedSchemas, env: string, extra: arrayObject = {}) {\n  const listErrors = data[env] || [];\n  Object.keys(listErrors).forEach((field) => {\n    const listFields = listErrors[field] || [];\n    Object.keys(listFields).forEach((code) => {\n      listFields[code] = addExtra(listFields[code], extra);\n    });\n  });\n  return listErrors;\n}\n\nfunction getError(data: NestedSchemas, status: string, code: string) {\n  const listErrors = data['http'][status] || [];\n  return {\n    code,\n    message: listErrors[code] || listErrors[\"default\"] || `Erreur wording: ${code}`,\n  };\n};\n\nfunction getErrors(data: NestedSchemas, env: string, errors: arrayObject, extra: arrayObject = {}) {\n  const listErrors = data[env] || [];\n  const buildErrors: any = {};\n  Object.keys(errors).forEach((field) => {\n    const listFields = listErrors[field] || [];\n    const code = errors[field];\n    buildErrors[field] = {\n      code,\n      message: listFields[code] || listFields[\"default\"] || `Erreur wording: ${code}`,\n    };\n    buildErrors[field].message = addExtra(buildErrors[field].message, extra);\n  });\n  return buildErrors;\n};\n\nfunction addExtra(message: string, extra: arrayObject = {}) {\n  let text = message;\n  Object.keys(extra).forEach((key) => {\n    text = text.replace(`{{${key}}}`, extra[key]);\n  });\n  return text;\n};\n\nexport const errors = (data: NestedSchemas) => ({\n  getEnvErrors: (env: string, extra: arrayObject) => getEnvErrors(data, env, extra),\n  getError: (status: string, code: string) => getError(data, status, code),\n  getErrors: (env: string, errors: arrayObject, extra: arrayObject) => getErrors(data, env, errors, extra),\n});\n"],"file":"errors.js"}