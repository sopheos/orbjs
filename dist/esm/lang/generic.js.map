{"version":3,"sources":["../../../src/lang/generic.ts"],"names":["getById","data","id","find","item","filterNoDefault","filter","row","gen","value","get","getLabel","label","handler","target","prop","Array","isArray","Proxy","generic"],"mappings":"AAGC;AAIA;;AAED,IAAMA,OAAO,GAAG,SAAVA,OAAU,CAACC,IAAD;AAAA,MAAsBC,EAAtB,uEAA2B,CAAC,CAA5B;AAAA,SAAkCD,IAAI,CAACE,IAAL,CAAU,UAACC,IAAD;AAAA,WAAUA,IAAI,CAACF,EAAL,KAAYA,EAAtB;AAAA,GAAV,KAAuCD,IAAI,CAACE,IAAL,CAAU,UAACC,IAAD;AAAA,WAAUA,IAAI,CAACF,EAAL,KAAY,CAAC,CAAvB;AAAA,GAAV,CAAzE;AAAA,CAAhB;;AAEA,IAAMG,gBAAe,GAAG,SAAlBA,eAAkB,CAACJ,IAAD;AAAA,SAAyBA,IAAI,CAACK,MAAL,CAAY,UAACC,GAAD;AAAA,WAASA,GAAG,CAACL,EAAJ,GAAS,CAAC,CAAnB;AAAA,GAAZ,CAAzB;AAAA,CAAxB;;AAEA,IAAMM,GAAG,GAAG,SAANA,GAAM,CAACP,IAAD;AAAA,SAA0B;AACpCQ,IAAAA,KAAK,EAAER,IAD6B;AAEpCS,IAAAA,GAAG,EAAE;AAAA,UAACR,EAAD,uEAAM,CAAC,CAAP;AAAA,aAAaF,OAAO,CAACC,IAAD,EAAOC,EAAP,CAApB;AAAA,KAF+B;AAGpCS,IAAAA,QAAQ,EAAE;AAAA,UAACT,EAAD,uEAAM,CAAC,CAAP;AAAA,aAAaF,OAAO,CAACC,IAAD,EAAOC,EAAP,CAAP,CAAmBU,KAAhC;AAAA,KAH0B;AAIpCP,IAAAA,eAAe,EAAE;AAAA,aAAMA,gBAAe,CAACJ,IAAD,CAArB;AAAA;AAJmB,GAA1B;AAAA,CAAZ;;AAOA,IAAMY,OAAO,GAAG;AACdH,EAAAA,GAAG,EAAE,aAACI,MAAD,EAAkBC,IAAlB,EAAqC;AACxC,QAAIC,KAAK,CAACC,OAAN,CAAcH,MAAd,CAAJ,EAA2B;AACzB,aAAON,GAAG,CAACM,MAAD,CAAV;AACD;;AAED,QAAIC,IAAI,IAAID,MAAZ,EAAoB;AAClB,UAAMb,IAAI,GAAGa,MAAM,CAACC,IAAD,CAAnB;AACA,aAAOC,KAAK,CAACC,OAAN,CAAchB,IAAd,IAAsBO,GAAG,CAACM,MAAM,CAACC,IAAD,CAAP,CAAzB,GAA2D,IAAIG,KAAJ,CAAUjB,IAAV,EAAgBY,OAAhB,CAAlE;AACD;;AAED,WAAO,EAAP;AACD;AAZa,CAAhB;AAeA,OAAO,IAAMM,OAAO,GAAG,SAAVA,OAAU,CAAClB,IAAD;AAAA,SAAmB,IAAIiB,KAAJ,CAAUjB,IAAV,EAAgBY,OAAhB,CAAnB;AAAA,CAAhB","sourcesContent":["export interface GenericItem {\n  id: number;\n  label: string;\n};\n\nexport interface Generic {\n  [key: string]: Generic | GenericItem[];\n};\n\nconst getById = (data: GenericItem[], id = -1) => data.find((item) => item.id === id) || data.find((item) => item.id === -1);\n\nconst filterNoDefault = (data: GenericItem[]) => data.filter((row) => row.id > -1);\n\nconst gen = (data: GenericItem[]) => ({\n  value: data,\n  get: (id = -1) => getById(data, id),\n  getLabel: (id = -1) => getById(data, id)!.label,\n  filterNoDefault: () => filterNoDefault(data),\n});\n\nconst handler = {\n  get: (target: Generic, prop: any): any => {\n    if (Array.isArray(target)) {\n      return gen(target);\n    }\n\n    if (prop in target) {\n      const data = target[prop];\n      return Array.isArray(data) ? gen(target[prop] as GenericItem[]) : new Proxy(data, handler);\n    }\n\n    return [];\n  },\n};\n\nexport const generic = (data: Generic) => new Proxy(data, handler);\n"],"file":"generic.js"}