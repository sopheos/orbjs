{"version":3,"sources":["../../../src/opening_hour/builder.ts"],"names":["constant","builder","schedules","listRules","forEach","schedule","ruleSequence","period","start","end","splitStart","split","dateStart","repeat","monthStart","scheduleMonths","find","month","id","parseInt","name","splitEnd","dateEnd","monthEnd","scheduleMonth","push","monthRange","months","length","join","dayRange","days","day","scheduleDay","scheduleDays","time","status","scheduleStatus","open"],"mappings":"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","sourcesContent":["import * as constant from \"./constant\";\nimport { Schedule } from \"./schedules\";\n\n/**\n * Créé une horaire au format opening_hours à partir d'une liste d'objets horaires\n * @param {Array<Schedule>} schedules\n * @returns {string | null} opening_hour si horaires valident, null sinon\n */\nexport function builder(schedules: Array<Schedule>): string | null {\n  const listRules: Array<String> = [];\n\n  schedules.forEach((schedule: Schedule) => {\n    const ruleSequence = [];\n\n    // Période\n    if (schedule.period.start && schedule.period.end) {\n      // Début période\n      const splitStart = schedule.period.start.split('-');\n      let dateStart = schedule.period.repeat ? '' : `${splitStart[0]} `;\n      const monthStart = constant.scheduleMonths.find((month) => month.id === parseInt(splitStart[1], 10));\n      if(!monthStart) return null;\n      dateStart += `${monthStart.name} ${splitStart[2]}`;\n\n      // Fin période\n      const splitEnd = schedule.period.end.split('-');\n      let dateEnd = schedule.period.repeat ? '' : `${splitEnd[0]} `;\n      const monthEnd = constant.scheduleMonths.find((scheduleMonth) => scheduleMonth.id === parseInt(splitEnd[1], 10));\n      if(!monthEnd) return null;\n      dateEnd += `${monthEnd.name} ${splitEnd[2]}`;\n\n      ruleSequence.push(`${dateStart} - ${dateEnd}`);\n    }\n\n    // Mois\n    const monthRange: Array<String> = [];\n    schedule.months.forEach((month) => {\n      const scheduleMonth = constant.scheduleMonths.find((scheduleMonth) => scheduleMonth.id === month);\n      if(!scheduleMonth) return null;\n      monthRange.push(scheduleMonth.name);\n    });\n    if (monthRange.length) ruleSequence.push(monthRange.join(','));\n\n    // Jour\n    const dayRange: Array<String> = [];\n    schedule.days.forEach((day) => {\n      const scheduleDay = constant.scheduleDays.find((scheduleDay) => scheduleDay.id === day)\n      if(!scheduleDay) return null;\n      dayRange.push(scheduleDay.name);\n    });\n    if (dayRange.length) ruleSequence.push(dayRange.join(','));\n\n    // Heure minute\n    if (schedule.time.start && schedule.time.end) {\n      ruleSequence.push(`${schedule.time.start}-${schedule.time.end}`);\n    }\n\n    // Status\n    const status = constant.scheduleStatus.find((status) => status.id === schedule.time.open);\n    if(!status) return null;\n    ruleSequence.push(status.name);\n\n    listRules.push(ruleSequence.join(' '));\n  });\n\n  return listRules.join(';');\n}\n"],"file":"builder.js"}