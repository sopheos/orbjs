{"version":3,"sources":["../../../src/format_helpers/date_format.ts"],"names":["dateFormatAgo","value","date","Date","Number","isNaN","getTime","Intl","RelativeTimeFormat","options","dateStyle","toLocaleString","now","deltaDays","Math","max","round","relativeFormatter","numeric","format","oneMonthAgo","setMonth","getMonth","dateFormatter","DateTimeFormat","overOneMonthAgo","dateTimeFormatAgo","displayTime","timeStyle","deltaSeconds","deltaMinutes","deltaHours","timeFormatter","output","dateFormatterOptions"],"mappings":"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","sourcesContent":["/**\n * Format date to display a readable string in French\n * The return value is relative to the current time using Intl API\n * If older than two days but less than one month, display the number of days\n * If older than a month, display the date\n * Date must be in the past, if not it will be formatted to the current date\n *\n * @param {string} value date string to format\n * @return the formatted date string\n */\nexport function dateFormatAgo(value: string): string {\n  const date = new Date(value);\n\n  // If date is not a valid Date object, return an empty string\n  if (!(date instanceof Date) || Number.isNaN(date.getTime())) {\n    return '';\n  }\n\n  // Check browser compatibility\n  // If no available, return the date formated\n  if (!Intl || (!Intl.RelativeTimeFormat && typeof Intl.RelativeTimeFormat !== 'function')) {\n    const options: Intl.DateTimeFormatOptions = {\n      dateStyle: 'long'\n    }\n\n    return date.toLocaleString('fr-FR', options);\n  }\n\n  const now = new Date();\n  const deltaDays = Math.max(Math.round((now.getTime() - date.getTime()) / 86400000), 0);\n  const relativeFormatter = new Intl.RelativeTimeFormat('fr-FR', { numeric: 'auto' });\n\n  // Today, yesterday or two days ago\n  if (deltaDays >= 0 && deltaDays <= 2) {\n    return relativeFormatter.format(-deltaDays, 'day');\n  }\n\n  const oneMonthAgo = new Date();\n  oneMonthAgo.setMonth(now.getMonth() - 1);\n\n  // Less than a month\n  if (date > oneMonthAgo) {\n    return `${deltaDays} jours`;\n  }\n\n  // More than one month\n  const dateFormatter = Intl.DateTimeFormat('fr-FR', { dateStyle: 'long' });\n  const overOneMonthAgo = dateFormatter.format(date);\n  return `le ${overOneMonthAgo}`;\n}\n\n/**\n * Format date or datetime to display a readable string in French\n * The return value is relative to the current time using Intl API\n * If older than a month, display the date (and time if displayTime is true)\n * Date must be in the past, if not it will be formatted to the current time\n *\n * @param {string} value date(time) string to format\n * @param {boolean} displayTime boolean display time when the day is before today\n * @return the formatted date(time) string\n */\nexport function dateTimeFormatAgo(value: string, displayTime: boolean = false): string {\n  const date = new Date(value);\n\n  // If date is not a valid Date object, return an empty string\n  if (!(date instanceof Date) || Number.isNaN(date.getTime())) {\n    return '';\n  }\n\n  const now = new Date();\n\n  // Check browser compatibility\n  // If no available, return the date formated\n  if (!Intl || !Intl.RelativeTimeFormat && typeof Intl.RelativeTimeFormat !== 'function') {\n    const options: Intl.DateTimeFormatOptions = {\n      dateStyle: 'long'\n    }\n\n    if (displayTime) {\n      options.timeStyle = 'short'\n    }\n\n    return date.toLocaleString('fr-FR', options);\n  }\n\n  const relativeFormatter = new Intl.RelativeTimeFormat('fr-FR', { numeric: 'auto' });\n\n  const deltaSeconds = Math.max(Math.round((now.getTime() - date.getTime()) / 1000), 0);\n\n  // Less than a minute\n  if (deltaSeconds <= 60) {\n    return relativeFormatter.format(-deltaSeconds, 'second');\n  }\n\n  const deltaMinutes = Math.round(deltaSeconds / 60);\n\n  // Less than an hour\n  if (deltaMinutes < 60) {\n    return relativeFormatter.format(-deltaMinutes, 'minute');\n  }\n\n  const deltaHours = Math.round(deltaMinutes / 60);\n\n  // Less than a day\n  if (deltaHours < 24) {\n    return relativeFormatter.format(-deltaHours, 'hour');\n  }\n\n  const oneMonthAgo = new Date();\n  oneMonthAgo.setMonth(now.getMonth() - 1);\n\n  const timeFormatter = Intl.DateTimeFormat('fr-FR', {\n    timeStyle: 'short'\n  });\n\n  const deltaDays = Math.round(deltaHours / 24);\n\n  // Less than a month\n  if (date > oneMonthAgo) {\n    let output = relativeFormatter.format(-deltaDays, 'day');\n\n    // Is yesterday or displayTime is set to true : display time\n    if (deltaDays < 2 || displayTime) {\n      output += ` Ã  ${timeFormatter.format(date)}`;\n    }\n    return output;\n  }\n\n  // Older than a month, display the date (not relative)\n  const dateFormatterOptions: Intl.DateTimeFormatOptions = {\n    dateStyle: 'long',\n  };\n\n  if (displayTime) {\n    dateFormatterOptions.timeStyle = 'short';\n  }\n\n  const dateFormatter = Intl.DateTimeFormat('fr-FR', dateFormatterOptions);\n\n  return `le ${dateFormatter.format(date)}`;\n}\n"],"file":"date_format.js"}