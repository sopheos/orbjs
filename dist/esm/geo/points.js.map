{"version":3,"sources":["../../../src/geo/points.ts"],"names":["Point","Points","point","points","push","length","minlat","maxlat","minlon","maxlon","i","forEach","getLat","getLon","bounds","lat","lon","center","min","item","d","distanceTo"],"mappings":"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","sourcesContent":["import { Point } from \"./point\"\n\n/**\n * Points\n */\nexport class Points {\n\n    private points: Point[] = [];\n\n    public add(point: Point): Points {\n        this.points.push(point);\n        return this;\n    }\n\n    public all(): Point[] {\n        return this.points;\n    }\n\n    public bounds(): Point[] {\n        if (!this.points.length) return [new Point(-180, -180), new Point(180, 180)];\n\n        let minlat = 0;\n        let maxlat = 0;\n        let minlon = 0;\n        let maxlon = 0;\n        let i = 0;\n\n        this.points.forEach((point: Point) => {\n            if (i === 0) {\n                minlat = point.getLat();\n                maxlat = point.getLat();\n                minlon = point.getLon();\n                maxlon = point.getLon();\n            } else {\n                if (minlat > point.getLat()) minlat = point.getLat();\n                if (maxlat < point.getLat()) maxlat = point.getLat();\n                if (minlon > point.getLon()) minlon = point.getLon();\n                if (maxlon < point.getLon()) maxlon = point.getLon();\n            }\n\n            i++;\n        });\n\n        return [new Point(minlat, minlon), new Point(maxlat, maxlon)];\n    }\n\n    public center(): Point {\n        if (!this.points.length) return new Point();\n        let bounds = this.bounds();\n        let lat = (bounds[0].getLat() + bounds[1].getLat()) / 2;\n        let lon = (bounds[0].getLon() + bounds[1].getLon()) / 2;\n        return new Point(lat, lon);\n    }\n\n    public closer(): Point {\n\n        if (!this.points.length) return new Point();\n\n        let center: Point = this.center();\n        let min: number | null = null;\n        let item: Point = new Point();;\n\n        this.points.forEach((point: Point) => {\n            let d = center.distanceTo(point);\n\n            if (min === null || min > d) {\n                min = d;\n                item = point;\n            }\n        });\n\n        return item;\n    }\n}"],"file":"points.js"}